apiVersion: automation.cloudbees.io/v1alpha1
kind: action
name: 'Register build artifact'
description: 'Creates an artifact version association with the workflow run.'

inputs:
  name:
    description: 'The name of the artifact.'
    required: true
  version:
    description: 'The version of the artifact.'
    required: true
  url:
    description: 'The url where the artifact version is located e.g. docker.io/myapp/myimg:1.0.0.'
    required: true
  digest:
    description: 'The artifact digest that uniquely and immutably identifies the artifact.'
  labels:
    description: 'List of comma-separated labels.'
  commit:
    description:
      The commit ID from the source repository, used when registering the build artifact in CloudBees platform.
    default: ${{ cloudbees.scm.sha }}
  repository-url:
    description: >
      The clone URL of the source repository, used when registering the build artifact in CloudBees platform.
    default: ${{ cloudbees.scm.repositoryUrl }}
  ref:
    description: >
      The tag or branch of the source repository, used when registering the build artifact in CloudBees platform.
    default: ${{ cloudbees.scm.ref }}
  component-id:
    description: >
      The ID of the component associated with the artifact. If not provided, the artifact is registered with the component of the current workflow run.
    default: ${{ cloudbees.component.id }}

outputs:
  artifact-id:
    value: ${{ steps.registerBuildArtifact.outputs.artifact-id }}
    description: "The unique identifier of the artifact."

runs:
  using: composite
  steps:
    - id: registerBuildArtifact
      name: Register Build Artifact
      uses: docker://esolang/jq:latest
      run: |
        # Set the fold width to match the table column width
        FOLD_WIDTH=48
        
        # Helper function to fold and print a parameter name and value 
        fold_and_print() {
          local pName="$1"
          local pValue="$2"
          folded=$(echo "$pValue" | fold -s -w $FOLD_WIDTH)
          first=1
          echo "$folded" | while IFS= read -r line; do
            if [ $first -eq 1 ]; then
              printf "| \033[1m%-20s\033[0m | %-50s |\n" "$pName" "$line"
              first=0
            else
              printf "| \033[1m%-20s\033[0m | %-50s |\n" "" "$line"
            fi
          done
        }
        
        # Function to print inputs in a formatted table
        print_inputs() {
          echo "+----------------------+----------------------------------------------------+"
          printf "| \033[1m%-20s\033[0m | \033[1m%-50s\033[0m |\n" "Parameter" "Value"
          echo "+----------------------+----------------------------------------------------+"
          printf "| \033[1m%-20s\033[0m | %-50s |\n" "name" "$INPUT_NAME"
          fold_and_print "url" "$INPUT_URL"
          printf "| \033[1m%-20s\033[0m | %-50s |\n" "version" "$INPUT_VERSION"
          fold_and_print "digest" "$INPUT_DIGEST"
          printf "| \033[1m%-20s\033[0m | %-50s |\n" "component-id" "$INPUT_COMPONENT_ID"
          printf "| \033[1m%-20s\033[0m | %-50s |\n" "commit" "$INPUT_COMMIT"
          printf "| \033[1m%-20s\033[0m | %-50s |\n" "repository-url" "$INPUT_REPOSITORY_URL"
          printf "| \033[1m%-20s\033[0m | %-50s |\n" "ref" "$INPUT_REF"
          fold_and_print "labels" "$INPUT_LABELS"
          echo "+----------------------+----------------------------------------------------+"        
        }
        
        # Create the payload JSON file
        echo '{ "runId": "'"$CLOUDBEES_RUN_ID"'", "runAttempt": "'"$CLOUDBEES_RUN_ATTEMPT"'",' > /tmp/payload.json 
        echo '"name": "'"$INPUT_NAME"'", "url": "'"$INPUT_URL"'", "version": "'"$INPUT_VERSION"'" ' >> /tmp/payload.json

         # Add the commit info if commit sha is provided
        if [ -n "$INPUT_COMMIT" ];
        then       
          echo ',  "commit" : {' >> /tmp/payload.json
          echo '    "repositoryUrl": "'"$INPUT_REPOSITORY_URL"'",' >> /tmp/payload.json
          echo '    "commitId": "'"$INPUT_COMMIT"'",' >> /tmp/payload.json
          echo '    "ref": "'"$INPUT_REF"'"' >> /tmp/payload.json
          echo '  }' >> /tmp/payload.json
        fi

        # Add the digest parameter if provided
        if [ -n "$INPUT_DIGEST" ]; 
        then
          echo ', "digest": "'"$INPUT_DIGEST"'"' >> /tmp/payload.json
        fi

        # Add the labels parameter if provided
        if [ -n "$INPUT_LABELS" ]; 
        then
         # Convert labels to JSON array format
         formatted_labels=$(echo "$INPUT_LABELS" | sed -e 's/[][]//g' | awk -v RS=, -v ORS=, '{ gsub(/^[ \t\r\n]+|[ \t\r\n]+$/, "");  gsub(/\\"/, "\\\\\""); gsub(/"/, "\\\""); printf "\"%s\",", $0 }' | sed 's/,$//' | sed 's/^/[/; s/$/]/')
         echo ', "labels": '"$formatted_labels">> /tmp/payload.json
        fi
        
        # Add the componentId parameter if provided
        if [ -n "$INPUT_COMPONENT_ID" ];
        then
          echo ', "componentId": "'"$INPUT_COMPONENT_ID"'"' >> /tmp/payload.json
        fi
        echo ' }' >> /tmp/payload.json

        # Display the generated payload
        echo "Request payload:"
        print_inputs
        
        # Make Platform API call to create artifact_info record
        response=$(curl --retry-delay 5 --retry 3 --retry-connrefused --silent --show-error --fail-with-body \
          -X 'POST' "$URL/v3/artifactinfos" \
          -H "Authorization: Bearer $JWT" \
          -H 'Content-Type: application/json' \
          --data-binary '@/tmp/payload.json') || command_failed=1
        
        # Check if the API call failed
        if [ ${command_failed:-0} -eq 1 ];
        then
          echo "Platform API call failed with error: '$response'"
          exit 1
        fi
        
        # If successful, show the response nicely
        echo ""
        echo "Platform API success response:"
        echo "$response" | python3 -m json.tool || echo "$response"
        
        # Extract the artifactId
        id=$(echo "$response" | grep -o '"id": *"[^"]*"' | sed 's/.*"id": *"\([^"]*\)".*/\1/')
        
        # Set it as an output
        printf %s "$id" > $CLOUDBEES_OUTPUTS/artifact-id

      env:
        JWT: ${{ cloudbees.api.token }}
        URL: ${{ cloudbees.api.url }}
        INPUT_NAME: ${{ inputs.name }}
        INPUT_VERSION: ${{ inputs.version }}
        INPUT_URL: ${{ inputs.url }}
        INPUT_DIGEST: ${{ inputs.digest }}
        INPUT_LABELS: ${{ inputs.labels }}
        INPUT_REPOSITORY_URL: ${{ inputs.repository-url }}
        INPUT_COMMIT: ${{ inputs.commit }}
        INPUT_REF: ${{ inputs.ref }}
        INPUT_COMPONENT_ID: ${{ inputs.component-id }}
        CLOUDBEES_RUN_ID: ${{ cloudbees.run_id }}
        CLOUDBEES_RUN_ATTEMPT: ${{ cloudbees.run_attempt }}

