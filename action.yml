apiVersion: automation.cloudbees.io/v1alpha1
kind: action
name: 'Register build artifact'
description: 'Creates an artifact version association with the workflow run.'

inputs:
  name:
    description: 'The name of the artifact.'
    required: true
  version:
    description: 'The version of the artifact.'
    required: true
  url:
    description: 'The url where the artifact version is located e.g. docker.io/myapp/myimg:1.0.0.'
    required: true
  digest:
    description: 'The artifact digest that uniquely and immutably identifies the artifact.'
  labels:
    description: 'List of comma-separated labels.'
  repository-url:
    description: "The clone URL of the repository."
  commit:
    description: "The commit ID from the source repository. The output value of `commit` from `actions/checkout` action should be used, if checking out from a different repository or branch. Default value is `${{ cloudbees.scm.sha }}`."
  commit-url:
    description: "The commit URL from the source repository."
  ref:
    description: "The ref or branch of the checked-out repository."

runs:
  using: composite
  steps:
    - id: registerBuildArtifact
      name: Register Build Artifact
      uses: docker://esolang/jq:latest
      run: |
        # If commit is not supplied, use context values
        # Add the labels parameter if provided
        if [ -z "$INPUT_COMMIT" ]; 
        then
          INPUT_COMMIT="${{ cloudbees.scm.sha }}"
          INPUT_REPOSITORY_URL="${{ cloudbees.scm.repositoryUrl }}"
          # In the default case, ref is set to branch
          INPUT_REF="${{ cloudbees.scm.branch }}"
          echo "Provider=${{ cloudbees.scm.provider }}"
          echo "ProviderURL=${{ cloudbees.scm.provider_url }}"
          case "${{ cloudbees.scm.provider }}" in
            github)
              #for debug
              INPUT_REPOSITORY=rich/thomas
              INPUT_PROVIDER_URL="http://rich.org.git"
              IFS='/'
              set -- $INPUT_REPOSITORY
              INPUT_COMMIT_URL="${INPUT_PROVIDER_URL%.git}/projects/$1/repos/$2/commits/${{ cloudbees.scm.sha }}"
              ;;    
            gitlab)
              INPUT_COMMIT_URL="${INPUT_REPOSITORY_URL%.git}/commit/${{ cloudbees.scm.sha }}"
              ;;
            bitbucket)
              INPUT_COMMIT_URL="${INPUT_REPOSITORY_URL%.git}/commits/${{ cloudbees.scm.sha }}"
              ;;
            bitbucketdc)
              INPUT_REPOSITORY="${{ cloudbees.scm.repository }}"
              INPUT_PROVIDER_URL="${{ cloudbees.scm.provider_url }}"
              IFS='/'
              set -- $INPUT_REPOSITORY
              INPUT_COMMIT_URL="${INPUT_PROVIDER_URL%.git}/projects/$1/repos/$2/commits/${{ cloudbees.scm.sha }}"
              ;;
            *)
              INPUT_COMMIT_URL="Unknown"
              ;;
          esac
        fi
        
        # Create the payload JSON file
        echo '{ "runId": "'"$CLOUDBEES_RUN_ID"'", "runAttempt": "'"$CLOUDBEES_RUN_ATTEMPT"'",' > /tmp/payload.json 
        echo '"name": "'"$INPUT_NAME"'", "url": "'"$INPUT_URL"'", "version": "'"$INPUT_VERSION"'", ' >> /tmp/payload.json
        echo '"operation": "'"PUBLISHED"'", ' >> /tmp/payload.json
        echo '  "commit" : {' >> /tmp/payload.json
        echo '    "repository-url": "'"$INPUT_REPOSITORY_URL"'",' >> /tmp/payload.json
        echo '    "commit-id": "'"$INPUT_COMMIT"'",' >> /tmp/payload.json
        echo '    "commit-url": "'"$INPUT_COMMIT_URL"'",' >> /tmp/payload.json
        echo '    "ref": "'"$INPUT_REF"'"' >> /tmp/payload.json
        echo '  }' >> /tmp/payload.json
                
        # Add the digest parameter if provided
        if [ -n "$INPUT_DIGEST" ]; 
        then
          echo ', "digest": "'"$INPUT_DIGEST"'"' >> /tmp/payload.json
        fi
        
        # Add the labels parameter if provided
        if [ -n "$INPUT_LABELS" ]; 
        then
         # Convert labels to JSON array format
         formatted_labels=$(echo "$INPUT_LABELS" | sed -e 's/[][]//g' | awk -v RS=, -v ORS=, '{ gsub(/^[ \t\r\n]+|[ \t\r\n]+$/, "");  gsub(/\\"/, "\\\\\""); gsub(/"/, "\\\""); printf "\"%s\",", $0 }' | sed 's/,$//' | sed 's/^/[/; s/$/]/')
         echo ', "labels": '"$formatted_labels">> /tmp/payload.json
        fi
        echo ' }' >> /tmp/payload.json

        # Display the generated payload
        echo "Request payload:"
        python3 -m json.tool /tmp/payload.json
        
        # Make Platform API call to create artifact_info record
        response=$(curl --silent --show-error --fail-with-body \
          -X 'POST' "$URL/v2/workflows/runs/artifactinfos" \
          -H "Authorization: Bearer $JWT" \
          -H 'Content-Type: application/json' \
          --data-binary '@/tmp/payload.json') || command_failed=1
       
        # Check if the API call failed
        if [ ${command_failed:-0} -eq 1 ];
        then
          echo "Platform API call failed with error: '$response'"
          exit 1
        fi
        
        # If successful, show the response nicely
        echo ""
        echo "Platform API success response:"
        echo "$response" | python3 -m json.tool || echo "$response"
      env:
        JWT: ${{ cloudbees.api.token }}
        URL: ${{ cloudbees.api.url }}
        INPUT_NAME: ${{ inputs.name }}
        INPUT_VERSION: ${{ inputs.version }}
        INPUT_URL: ${{ inputs.url }}
        INPUT_DIGEST: ${{ inputs.digest }}
        INPUT_LABELS: ${{ inputs.labels }}
        INPUT_REPOSITORY_URL: ${{ inputs.repository-url }}
        INPUT_COMMIT: ${{ inputs.commit }}
        INPUT_COMMIT_URL: ${{ inputs.commit-url }}
        INPUT_REF: ${{ inputs.ref }}
        CLOUDBEES_RUN_ID: ${{ cloudbees.run_id }}
        CLOUDBEES_RUN_ATTEMPT: ${{ cloudbees.run_attempt }}

