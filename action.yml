apiVersion: automation.cloudbees.io/v1alpha1
kind: action
name: 'Register build artifact'
description: 'Creates an artifact version association with the workflow run.'

inputs:
  name:
    description: 'The name of the artifact.'
    required: true
  version:
    description: 'The version of the artifact.'
    required: true
  url:
    description: 'The url where the artifact version is located e.g. docker.io/myapp/myimg:1.0.0.'
    required: true
  digest:
    description: 'The artifact digest that uniquely and immutably identifies the artifact.'
  labels:
    description: 'List of comma-separated labels.'
  repository-url:
    description: "The clone URL of the repository."
  commit:
    description: "The commit ID from the source repository."
  commit-url:
    description: "The commit URL from the source repository."
  ref:
    description: "The ref or branch of the checked-out repository."

runs:
  using: composite
  steps:
    - id: registerBuildArtifact
      name: Register Build Artifact
      uses: docker://esolang/jq:latest
      run: |
        #Create payload
        echo '{ "runId": "'"$CLOUDBEES_RUN_ID"'", "runAttempt": "'"$CLOUDBEES_RUN_ATTEMPT"'",' > /tmp/payload.json
        echo '  "name": "'"$INPUT_NAME"'", "url": "'"$INPUT_URL"'", "version": "'"$INPUT_VERSION"'",' >> /tmp/payload.json
        echo '  "operation": "'"PUBLISHED"'",' >> /tmp/payload.json
        echo '  "commit" : {' >> /tmp/payload.json
        echo '    "repository-url": "'"$INPUT_REPOSITORY_URL"'",' >> /tmp/payload.json
        echo '    "commit-id": "'"$INPUT_COMMIT"'",' >> /tmp/payload.json
        echo '    "commit-url": "'"$INPUT_COMMIT_URL"'",' >> /tmp/payload.json
        echo '    "ref": "'"$INPUT_REF"'"' >> /tmp/payload.json
        echo '  }' >> /tmp/payload.json

        # digest param is optional
        if [ -n "$INPUT_DIGEST" ]; 
        then
          echo ', "digest": "'"$INPUT_DIGEST"'"' >> /tmp/payload.json
        fi
        
        # labels param is optional
        if [ -n "$INPUT_LABELS" ]; 
        then
         # convert to JSON format
         formatted_labels=$(echo "$INPUT_LABELS" | sed -e 's/[][]//g' | awk -v RS=, -v ORS=, '{ gsub(/^[ \t\r\n]+|[ \t\r\n]+$/, "");  gsub(/\\"/, "\\\\\""); gsub(/"/, "\\\""); printf "\"%s\",", $0 }' | sed 's/,$//' | sed 's/^/[/; s/$/]/')
         echo ', "labels": '"$formatted_labels">> /tmp/payload.json
        fi
        echo ' }' >> /tmp/payload.json

        #For debugging
        echo 'Payload:'
        cat /tmp/payload.json
        
        # Make Platform API call to create artifact_info record 
        response=$(curl --fail-with-body  -X 'POST' "$URL/v2/workflows/runs/artifactinfos" \
          -H "Authorization: Bearer $JWT" -H 'Content-Type: application/json' \
          --data-binary '@/tmp/payload.json') || command_failed=1
       
        # Check curl exit code
        if [ ${command_failed:-0} -eq 1 ];
        then
          echo "Platform API call failed with error: '$response'"
          exit 1
        fi
      env:
        JWT: ${{ cloudbees.api.token }}
        URL: ${{ cloudbees.api.url }}
        INPUT_NAME: ${{ inputs.name }}
        INPUT_VERSION: ${{ inputs.version }}
        INPUT_URL: ${{ inputs.url }}
        INPUT_DIGEST: ${{ inputs.digest }}
        INPUT_LABELS: ${{ inputs.labels }}
        INPUT_REPOSITORY_URL: ${{ inputs.repository-url }}
        INPUT_COMMIT: ${{ inputs.commit }}
        INPUT_COMMIT_URL: ${{ inputs.commit-url }}
        INPUT_REF: ${{ inputs.ref }}
        CLOUDBEES_RUN_ID: ${{ cloudbees.run_id }}
        CLOUDBEES_RUN_ATTEMPT: ${{ cloudbees.run_attempt }}

